// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dannywolfmx/ReSender/app/domain/repository (interfaces: Profile)

// Package mock_repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/dannywolfmx/ReSender/app/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockProfile is a mock of Profile interface
type MockProfile struct {
	ctrl     *gomock.Controller
	recorder *MockProfileMockRecorder
}

// MockProfileMockRecorder is the mock recorder for MockProfile
type MockProfileMockRecorder struct {
	mock *MockProfile
}

// NewMockProfile creates a new mock instance
func NewMockProfile(ctrl *gomock.Controller) *MockProfile {
	mock := &MockProfile{ctrl: ctrl}
	mock.recorder = &MockProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfile) EXPECT() *MockProfileMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockProfile) All() ([]*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockProfileMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockProfile)(nil).All))
}

// Detele mocks base method
func (m *MockProfile) Detele(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detele", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Detele indicates an expected call of Detele
func (mr *MockProfileMockRecorder) Detele(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detele", reflect.TypeOf((*MockProfile)(nil).Detele), arg0)
}

// Get mocks base method
func (m *MockProfile) Get(arg0 uint) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProfileMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProfile)(nil).Get), arg0)
}

// GetByName mocks base method
func (m *MockProfile) GetByName(arg0 string) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockProfileMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockProfile)(nil).GetByName), arg0)
}

// Save mocks base method
func (m *MockProfile) Save(arg0 *model.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockProfileMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProfile)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockProfile) Update(arg0 *model.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockProfileMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfile)(nil).Update), arg0)
}
